// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model AcademicSemester{
    id String @id @default(uuid())
    year Int
    title String
    code String
    startMonth String
    endMonth String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    students Student[]
    semesterRegistrations SemesterRegistration[]
    @@map("academic_semesters")
}


model AcademicFaculty{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicDepartments AcademicDepartment[]
  students Student[]
  faculties Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicFacultyId String @unique
  students Student[]
  faculties Faculty[]

  @@map("academic_department")
}

model Student {
 id String @id @default(uuid())
 studentId String
 firstName String
 lastName String
 middleName String
 profileImage String
 email String
 contactNo String
 gender String
 bloodGroup String
 createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  academicSemesterId String @unique
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  academicDepartmentId String @unique
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicFacultyId String @unique

 @@map("students")
}


model Faculty{
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo Int
  gender String
  bloodGroup String
  designation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  academicDepartmentId String @unique
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicFacultyId String @unique
   faculties  CourseFaculty[]
   @@map("faculties")
}


model Building{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms Room[]
  @@map("buildings")
}

model Room{
  id String @id @default(uuid())
  roomNumber String
  floor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  building Building @relation(fields: [buildingId],references: [id])
  buildingId String @unique
  @@map("rooms")
}

model Course{
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  prerequiset CourseToPrerequiset[] @relation("CourseToPrerequiset")
  prerequisetFor CourseToPrerequiset[] @relation("PrerequisetToCourse")
  courses  CourseFaculty[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("courses")
}

// -----atai kono primary id cilona tai @id diye 2ta mile akta unique id kora hoyece.akahne aki table 2ta FK thakay name diye nam specify kora hoyece

model CourseToPrerequiset{
couseId String
prerequisetId String

course Course @relation(fields: [couseId],references: [id],name: "CourseToPrerequiset")
prerequiset Course @relation(fields: [prerequisetId],references: [id],name: "PrerequisetToCourse")

@@id([couseId,prerequisetId])
}


model CourseFaculty{
  course Course @relation(fields: [courseId],references: [id])
  courseId String @unique
  faculty Faculty @relation(fields: [facultyId],references: [id])
  facultyId String @unique
  @@id([courseId,facultyId])
  @@map("course_faculties")
}


model SemesterRegistration {
  id                 String                      @id @default(uuid())
  startDate          DateTime
  endDate            DateTime
  status             SemesterRegistrationStatus? @default(UPCOMING)
  minCredit          Int                         @default(0)
  maxCredit          Int                         @default(0)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  academicSemesterId String
  academicSemester   AcademicSemester            @relation(fields: [academicSemesterId], references: [id])

  @@map("semester_registrations")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}